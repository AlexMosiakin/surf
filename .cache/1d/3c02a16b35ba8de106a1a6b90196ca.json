{"id":"shaders/vertex.glsl","dependencies":[{"name":"C:\\xampp\\htdocs\\test.ru\\surface\\package.json","includedInParent":true,"mtime":1603976775959}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec4 vPosition;\\nuniform vec2 pixels;\\nvarying vec3 vNormal;\\nattribute vec3 position1;\\nattribute vec3 position2;\\n\\nvoid main(){\\n vUv = uv;\\n vNormal = normal;\\n\\n //vec3 pos = position;\\n\\n//grayklein\\n float a = 2.;\\n float n = 2.;\\n float m = 1.;\\n float u = uv.x * 3.1415925*4.;\\n float v = uv.y * 3.1415925*2.;\\n float x = (a + cos(n*u/2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v)) * cos(m*u/2.0);\\n float y = (a + cos(n*u/2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v)) * sin(m*u/2.0);\\n float z = sin(n*u/2.0) * sin(v) + cos(n*u/2.0) * sin(2.*v);\\n vec3 klein = vec3(x,y,z);\\n\\n//sphere\\n float u1 = uv.x * 3.1415925;\\n float v1 = uv.y * -3.1415925*2.;\\n float  x1 = sin(u1)*sin(v1);\\n float  y1 = sin(u1)*cos(v1);\\n float  z1 = cos(u1);\\n vec3 sphere = vec3(x1,y1,z1);\\n\\n vec3 pos = mix(klein, sphere, 0.5 + 0.5*sin(time/3.));\\n\\n //vec3 midpos = mix(position, position1,1.);\\n\\n vec3 final = mix(position,position1, 0.5 + 0.5*sin(time/5.));\\n\\n gl_Position = projectionMatrix * modelViewMatrix * vec4( final, 1.0 );\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1109},"source":"shaders/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec4 vPosition;\\nuniform vec2 pixels;\\nvarying vec3 vNormal;\\nattribute vec3 position1;\\nattribute vec3 position2;\\n\\nvoid main(){\\n vUv = uv;\\n vNormal = normal;\\n\\n //vec3 pos = position;\\n\\n//grayklein\\n float a = 2.;\\n float n = 2.;\\n float m = 1.;\\n float u = uv.x * 3.1415925*4.;\\n float v = uv.y * 3.1415925*2.;\\n float x = (a + cos(n*u/2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v)) * cos(m*u/2.0);\\n float y = (a + cos(n*u/2.0) * sin(v) - sin(n*u/2.0) * sin(2.*v)) * sin(m*u/2.0);\\n float z = sin(n*u/2.0) * sin(v) + cos(n*u/2.0) * sin(2.*v);\\n vec3 klein = vec3(x,y,z);\\n\\n//sphere\\n float u1 = uv.x * 3.1415925;\\n float v1 = uv.y * -3.1415925*2.;\\n float  x1 = sin(u1)*sin(v1);\\n float  y1 = sin(u1)*cos(v1);\\n float  z1 = cos(u1);\\n vec3 sphere = vec3(x1,y1,z1);\\n\\n vec3 pos = mix(klein, sphere, 0.5 + 0.5*sin(time/3.));\\n\\n //vec3 midpos = mix(position, position1,1.);\\n\\n vec3 final = mix(position,position1, 0.5 + 0.5*sin(time/5.));\\n\\n gl_Position = projectionMatrix * modelViewMatrix * vec4( final, 1.0 );\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"d1a4e734817fd5d104c9143345371285","cacheData":{"env":{}}}